{
	"name": "CalculatePoints",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Final_CSV_Output",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "Final_CSV_Output_linkedservice",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "aggregate1",
					"description": "select season_end_year, team, count(*) as gamesplayed,sum(win) as Wins, sum(loss) Losses, sum(draw) Draws, sum(points) Pts, sum(goalscored) GS, sum(goalagainst) GA, sum(goaldifference) GD \nfrom plpoints\ngroup by season_end_year, team order by 1 desc,2"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Season_End_Year as integer,",
				"          team as string,",
				"          win as integer,",
				"          loss as integer,",
				"          draw as integer,",
				"          points as integer,",
				"          goalscored as integer,",
				"          goalagainst as integer,",
				"          goaldifference as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"source1 aggregate(groupBy(Season_End_Year,",
				"          team),",
				"     gamesplayed = count(1),",
				"          wins = sum(win),",
				"          loss = sum(loss),",
				"          draw = sum(draw),",
				"          pts = sum(points),",
				"          gs = sum(goalscored),",
				"          ga = sum(goalagainst),",
				"          gd = sum(goaldifference)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}